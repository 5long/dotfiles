# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function(${1}) {${2}}
# if
snippet if
	if (${1:true}) {${2}}
# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
# while (...) {...}
snippet wh
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */})
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}, ${1:10});
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
snippet clo
	(function(${1}) {
		${3://body}
	})(${2});
snippet ok
	ok(${1}, '${2}');
snippet eq
	equal(${1}, ${2}, '${3}');
snippet .
	this.${1}
snippet forin
	for (var ${1:i} in ${2}) {
		${3}
	}
snippet try
	try {
		${2}
	} catch (${1:e}) {
		${3}
	}
snippet qt
	test('${1}', function() {
		${2}
	});
snippet qat
	asyncTest('${1}', function() {
		expect();
		${2}
		stop();
	});
snippet ybase
	function ${1:className}(${2:config}) {
		$1.superclass.constructor.apply(this, arguments);
	}
	Y.extend($1, Y.Base, {
		${3}
	});
