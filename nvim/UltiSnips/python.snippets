global !p

def get_args(arglist):
    args = [arg.split('=')[0].strip() for arg in arglist.split(',') if arg]
    args = [arg for arg in args if arg and arg != "self"]

    return args

def write_init_body(args, snip):
    for arg in args:
        snip += "self._%s = %s" % (arg, arg)

endglobal


snippet #! "shebang" !
#!/usr/bin/env python
endsnippet


snippet fp
from __future__ import print_function
${0}
endsnippet


snippet utf8
# encoding: utf-8${0}
endsnippet


snippet _ "Double underscore" w
__${1:init}__${0}
endsnippet


snippet _a "__all__" w
__all__ = ["${0}"]
endsnippet


snippet cls "class w/o docstrings" b
class ${1:MyClass}(${2:object}):
	def __init__(self$3):
		`!p
snip.rv = ""
snip >> 2

args = get_args(t[3])
write_init_body(args, snip)
`$0
endsnippet


snippet def "function w/o docstrings" b!
def ${1:function}(`!p
if snip.indent:
   snip.rv = 'self'`${2}):
	${0:pass}
endsnippet

snippet defc "class method" b!
@classmethod
def ${1:function}(cls${2}):
	${0:pass}
endsnippet

snippet main "Main boilerplate for script" b
def main():
	pass

if __name__ == '__main__':
	main()
endsnippet

snippet super "super() boilerplate" w
super(${1:ClassName}, self).${2:method}(${0:*a, **kw})
endsnippet

snippet prop "Property" b
@property
def ${1:name}(self):
	return ${0}
endsnippet
